
1.随游戏一同发布的AssetBundle（一般位于StreamingAssets文件夹中）

2.完整的AssetBundle可以放在Application.persistentDataPath

3.Application.streamingAssetsPath (流资源路径)
	此属性用于返回流数据的缓存目录,返回路径为相对路径,适合设置一些外部数据文件的路径
	ios:
		/var/containers/Bundle/Application/app sandbox/xxx.app/Data/Raw 
	android:
		jar:file:///data/app/package name-1/base.apk!/assets
	Windows:
		D:/TowerGame/Assets/StreamingAssets	

4.Application.persistentDataPath (持久化数据存储目录的路径)
	返回一个持久化数据存储目录的路径(只读),可以在此路径下存储一些持久化的数据文件.同一平台,不同程序中调用此属性,返回值相同.
	ios:
		/var/mobile/Containers/Data/Application/app sandbox/Documents
	android:
		/storage/emulated/0/Android/data/package name/files
	Windows:
		C:/Users/Administrator/AppData/LocalLow/DefaultCompany/塔防	


5.StreamingAssets 这个文件夹下的资源也会全都打包在.apk或者.ipa 它和Resources的区别是，
	这个文件夹下的资源也会全都打包在.apk或者.ipa 它和Resources的区别是，Resources会压缩文件，但是它不会压缩原封不动的打包进去。并且它是一个只读的文件夹，就是程序运行时只能读 不能写。它在各个平台下的路径是不同的，不过你可以用Application.streamingAssetsPath 它会根据当前的平台选择对应的路径。

有些游戏为了让所有的资源全部使用assetbundle，会把一些初始的assetbundle放在StreamingAssets目录下，运行程序的时候在把这些assetbundle拷贝在Application.persistentDataPath目录下，如果这些assetbundle有更新的话，那么下载到新的assetbundle在把Application.persistentDataPath目录下原有的覆盖掉。

因为Application.persistentDataPath目录是应用程序的沙盒目录，所以打包之前是没有这个目录的，直到应用程序在手机上安装完毕才有这个目录。

StreamingAssets目录下的资源都是不压缩的，所以它比较大会占空间，比如你的应用装在手机上会占用100M的容量，那么你又在StreamingAssets放了一个100M的assetbundle，那么此时在装在手机上就会在200M的容量。

