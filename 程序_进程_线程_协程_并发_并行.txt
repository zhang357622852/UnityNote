
1.程序:App程序是指令的集合
	程序并不能单独执行，只有将程序加载到内存中，系统为他分配资源后才能够执行，这种执行的程序称之为进程

2.进程: 程是系统进行资源分配和调度的一个独立单位，每个进程都有自己单独的地址空间
	进程拥有自己独立的堆和栈，既不共享堆，亦不共享栈，进程由操作系统调度
	但是进程存在着很多缺陷，主要集中在两点： 
		(1).进程只能在同一时间干一件事情，如果想同时干两件事或多件事情，进程就无能为力了。 
		(2).进程在执行的过程中如果由于某种原因阻塞了，例如等待输入，整个进程就会挂起，其他与输入无关的工作也必须等待输入结束后才能顺序执行。

3.线程: 进程是线程的容器
	线程拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度(标准线程是的)。

4.协程(程序员自定义调度): 协程和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。

5.协程和线程的区别是：协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，协程也失去了标准线程使用多CPU的能力
打个比方吧，假设有一个操作系统，是单核的，系统上没有其他的程序需要运行，有两个线程 A 和 B ，A 和 B 在单独运行时都需要 10 秒来完成自己的任务，而且任务都是运算操作，A B 之间也没有竞争和共享数据的问题。现在 A B 两个线程并行，操作系统会不停的在 A B 两个线程之间切换，达到一种伪并行的效果，假设切换的频率是每秒一次，切换的成本是 0.1 秒(主要是栈切换)，总共需要 20 + 19 * 0.1 = 21.9 秒。如果使用协程的方式，可以先运行协程 A ，A 结束的时候让位给协程 B ，只发生一次切换，总时间是 20 + 1 * 0.1 = 20.1 秒。如果系统是双核的，而且线程是标准线程，那么 A B 两个线程就可以真并行，总时间只需要 10 秒，而协程的方案仍然需要 20.1 秒。

6.效率:进程和协程一样都是必须执行完一个任务才可以执行下一个任务，需要等待，协程切换开销比进程小(照这样看，进程和协程不利用多核?)
线程会利用多核，多个任务可以在多核上同时执行，无需等待，任务切换开销比进程小
	6.1:多核CPU，CPU密集型应用
	此时多线程的效率是最高的，多线程可以使到全部CPU核心满载，又避免了协程间切换造成性能损失。当CPU密集型任务时，CPU一直在利用着，切换反而会造成性能损失，即便协程上下文切换消耗最小，但也还是有消耗的。
	6.2:多核CPU，IO密集型应用
	此时采用多线程多协程效率最高，多线程可以使到全部CPU核心满载，而一个线程多协程，则更好的提高了CPU的利用率。
	6.3:单核CPU，CPU密集型应用
	单进程效率是最高，此时单个进程已经使到CPU满载了。
	6.4:单核CPU，IO密集型应用
	多协程，效率最高。例如，看了上面应该也是知道的了

7.并行:多核为前提,同一时刻
	并行就是指同一时刻有两个或两个以上的“工作单位”在同时执行，从硬件的角度上来看就是同一时刻有两条或两条以上的指令处于执行阶段。所以，多核是并行的前提，单线程永远无法达到并行状态。可以利用多线程和度进程到达并行状态。另外的，Python的多线程由于GIL的存在，对于Python来说无法通过多线程到达并行状态

8.并发:同一时间段里 /重叠时间
	对于并发的理解，要从两方面去理解，1.并发设计 2.并发执行。先说并发设计，当说一个程序是并发的，更多的是指这个程序采取了并发设计。

并发设计的标准：使多个操作可以在重叠的时间段内进行 ，这里的重点在于重叠的时间内， 重叠时间可以理解为一段时间内。例如：在时间1s秒内, 具有IO操作的task1和task2都完成，这就可以说是并发执行。所以呢，单线程也是可以做到并发运行的。当然啦，并行肯定是并发的。一个程序能否并发执行，取决于设计，也取决于部署方式。例如, 当给程序开一个线程（协程是不开的），它不可能是并发的，因为在重叠时间内根本就没有两个task在运行。当一个程序被设计成完成一个任务再去完成下一个任务的时候，即便部署是多线程多协程的也是无法达到并发运行的



9.并行与并发的关系: 并行与并发的关系: 并发的设计使到并发执行成为可能，而并行是并发执行的其中一种模式。

10.多核: 将多个计算内核集成在一个处理器(cpu)中

11.多处理器(cpu): 每个cup可以是单核或多核:服务器有的就是多个cpu一个cup中又多核
	